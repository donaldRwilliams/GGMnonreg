% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/enr.R
\name{enr}
\alias{enr}
\title{Expected Network Replicability}
\usage{
enr(net, n, alpha = 0.05, replications = 2, type = "pearson")
}
\arguments{
\item{net}{True network of dimensions \emph{p} by \emph{p}.}

\item{n}{Integer. The samples size, assumed equal in the replication
attempts.}

\item{alpha}{The desired significance level (defaults to \code{0.05}). Note that
1 - alpha corresponds to specificity.}

\item{replications}{Integer. The desired number of replications.}

\item{type}{Character string. Which type of correlation coefficients
to be computed. Options include \code{"pearson"} (default)
and \code{"spearman"}.}
}
\value{
An list of class \code{enr} including the following:

\itemize{

\item{\strong{ave_power}}: Average power.

\item{\strong{cdf}}: cumulative distribution function.

\item{\strong{p_s}}: Power for each edge, or the probability
of success for a given trial.

\item{\strong{p}}: Number of nodes.

\item{\strong{n_nonzero}}: Number of edges.

\item{\strong{n}}: Sample size.

\item{\strong{replication}}: Replication attempts.

\item{\strong{var_pwr}}: Variance of power.

\item{\strong{type}}: Type of correlation coefficient.

}
}
\description{
Investigate network replicability for any kind of
             partial correlation, assuming there is an analytic
             solution for the standard error (e.g., Pearson's or Spearman's).
}
\note{
This method was introduced in
\insertCite{williams2020learning;textual}{GGMnonreg}.

The basic idea is to determine the replicability of edges in a
partial correlation network. This requires defining the true
network, which can include edges of various sizes, and then
solving for the proportion of edges that are expected
to be replicated (e.g. in two, three, or four replication attempt).
}
\examples{
\donttest{
# (1) define partial correlation network

# correlations from ptsd symptoms
cors <- cor(GGMnonreg::ptsd)

# inverse
inv <- solve(cors)

# partials
pcors <-  -cov2cor(inv)

# set values to zero
# (this is the partial correlation network)
pcors <- ifelse(abs(pcors) < 0.05, 0, pcors)


# compute ENR in two replication attempts
fit_enr <- enr(net = pcors,
               n = 500,
               replications = 2)


# intuition for the method:
# The above did not require simulation, and here I use simulation
# for the same purpose.

# location of edges
# (where the edges are located in the network)
index <- which(pcors[upper.tri(diag(20))] != 0)

# convert network a into correlation matrix
# (this is needed to simulate data)
diag(pcors) <- 1
cors_new <- corpcor::pcor2cor(pcors)

# replicated edges
# (store the number of edges that were replicated)
R <- NA

# simulate how many edges replicate in two attempts
# (increase 100 to, say, 5,000)
for(i in 1:100){

  # two replications
  Y1 <- MASS::mvrnorm(500, rep(0, 20), cors_new)
  Y2 <- MASS::mvrnorm(500, rep(0, 20), cors_new)

  # estimate network 1
  fit1 <- ggm_inference(Y1, boot = FALSE)

  # estimate network 2
  fit2 <- ggm_inference(Y2, boot = FALSE)

  # number of replicated edges (detected in both networks)
  R[i] <- sum(
    rowSums(
      cbind(fit1$adj[upper.tri(diag(20))][index],
            fit2$adj[upper.tri(diag(20))][index])
    ) == 2)
}


# combine simulation and analytic
cbind.data.frame(
  data.frame(simulation = sapply(seq(0, 0.9, 0.1), function(x) {
    mean(R > round(length(index) * x) )
  })),
  data.frame(analytic = round(fit_enr$cdf, 3))
)

# now compare simulation to the analytic solution
# average replicability (simulation)
mean(R / length(index))

# average replicability (analytic)
fit_enr$ave_pwr
}

}
\references{
\insertAllCited{}
}
